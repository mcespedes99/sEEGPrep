#---- begin snakebids boilerplate ----------------------------------------------

import snakebids
from snakebids import bids
from os.path import join

configfile: workflow.source_path('../config/snakebids.yml')

# Get input wildcards
inputs = snakebids.generate_inputs(
    bids_dir=config["bids_dir"],
    pybids_inputs=config["pybids_inputs"],
    pybids_database_dir=config.get("pybids_db_dir"),
    pybids_reset_database=config.get("pybids_db_reset"),
    derivatives=config.get("derivatives", None),
    participant_label=config.get("participant_label", None),
    exclude_participant_label=config.get("exclude_participant_label", None),
    use_bids_inputs=True,
)

#this adds constraints to the bids naming
wildcard_constraints:  **snakebids.get_wildcard_constraints(config['pybids_inputs'])

# Manage default case (no flags)
run_all = False
if (not config['run_all']) and (not config['downsample']) \
    and (not config['filter']) and (not config['rereference']) \
    and (not config['regions_id']):
    print('hehe')
    run_all = True

#---- end snakebids boilerplate -----------------------------------------------

## Downsampling
if config['downsample'] or config['run_all'] or run_all:
    include: "rules/downsample.smk"

## Cleaning
if config['filter'] or config['run_all'] or run_all:
    include: "rules/filter.smk"

## Rereferencing
if config['rereference'] or config['run_all'] or run_all:
    include: "rules/rereference.smk"

## Region identification
if config['regions_id'] or config['run_all'] or run_all:
    include: "rules/identify_regions.smk"


# include: "rules/all_rule.smk"

### RULE ALL
# Define inputs
def define_all_inputs():
    # If regions_id is the last step
    if config['run_all'] or config['regions_id']:
        print('run_all')
        return rules.identify_regions.output
    # Else if rereference is the last step
    elif config['rereference']:
        return rules.rereference.output
    # Else if filtering is the last step
    elif config['filter']:
        return rules.filter_data.output
    # Else if downsampling is the last step
    elif config['downsample']:
        return rules.downsample.output
    # Else: default case run_all
    else:
        print('hola')
        return rules.identify_regions.output

rule all:
    input:
        expand(
            expand(
                define_all_inputs(),
                allow_missing = True,
            ),
            zip,
            **inputs.zip_lists['ieeg']
        ),
    default_target: True

